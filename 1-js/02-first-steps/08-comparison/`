# Comparaisons

Il y a de nombreux opérateurs de comparaison que nous connaissons des mathématiques :

- Plus grand/petit que : <code>a &gt; b</code>, <code>a &lt; b</code>.
- Plus grand/petit ou égal à : <code>a &gt;= b</code>, <code>a &lt;= b</code>.
- Le contrôle d'égalité est écrit en tant que `a == b` (veuillez noter le signe de la double équation `=`. Un seul symbole `a = b` signifierait une affectation).
- Pas égal. En maths, la notation est `≠`, en JavaScript, elle est écrite comme une assignation avec un signe d’exclamation : <code>a != b</code>.

## Booléen est le résultat

Tout comme tous les autres opérateurs, une comparaison renvoie une valeur. Cette valeur est du type booléen.

- `true` -- signifie "oui", "correct" ou "vrai".
- `false` -- signifie "non", "incorrect" ou "faux".

Par exemple :

```js run
alert( 2 > 1 );  // true (correct)
alert( 2 == 1 ); // false (faux)
alert( 2 != 1 ); // true (correct)
```

Un résultat de comparaison peut être affecté à une variable, comme toute valeur :

```js run
let result = 5 > 4; // attribue le résultat de la comparaison
alert( result ); // true
```

## Comparaison de chaînes de caractères

Pour voir quelle chaîne de caractères est plus grande que l'autre, on utilise l'ordre dit "dictionnaire" ou "lexicographique".

En d'autres termes, les chaînes de caractères sont comparées lettre par lettre.

Par exemple :

```js run
alert( 'Z' > 'A' ); // true
alert( 'Glow' > 'Glee' ); // true
alert( 'Bee' > 'Be' ); // true
```

L'algorithme pour comparer deux chaînes  de caractères est simple :

1. Compare les premiers caractères des deux chaînes de caractères.
2. Si le premier est supérieur (ou inférieur), la première chaîne de caractères est supérieure (ou inférieure) à la seconde. Nous en avons fini.
3. Sinon, si les premiers caractères sont égaux, comparez les deuxièmes caractères de la même manière.
4. Répéter jusqu'à la fin d'une chaîne de caractères.
5. Si les deux chaînes de caractères se sont terminées simultanément, alors elles sont égales. Sinon, la chaîne la plus longue est plus grande.

Dans l'exemple ci-dessus, la comparaison `'Z' > 'A'` obtient le résultat à la première étape.

Les chaînes de caractères `"Glow"` et `"Glee"` sont comparées caractère par caractère :

1. `G` est identique à `G`.
2. `l` est identique à `l`.
3. `o` est plus grand que `e`. On stop ici. La première chaîne de caractères est plus grande.

```smart header="Pas vraiment un dictionnaire, mais plutôt l'ordre Unicode"
L'algorithme de comparaison ci-dessus est à peu près équivalent à celui utilisé dans les dictionnaires ou les annuaires téléphoniques. Mais ce n’est pas exactement la même chose.

Par exemple, cette notion est importante à comprendre. Une lettre majuscule `"A"` n'est pas égale à la lettre minuscule `"a"`. Lequel est le plus grand ? En fait, le minuscule `"a"` l'est. Pourquoi ? Parce que le caractère minuscule a un index plus grand dans la table de codage interne (Unicode). Nous reviendrons sur les détails spécifiques et leurs conséquences dans le chapitre <info:string>.
```

## Comparaison de différents types

Lorsque les valeurs comparées appartiennent à différents types, elles sont converties en nombres.

Par exemple :

```js run
alert( '2' > 1 ); // true, la chaîne '2' devient un numéro 2
alert( '01' == 1 ); // true, chaîne '01' devient un numéro 1
```

Pour les valeurs booléennes, `true` devient `1` et `false` devient `0`, c'est pourquoi :

```js run
alert( true == 1 ); // true
alert( false == 0 ); // true
```

````smart header="Une conséquence amusante"
Il est possible que dans le même temps :

- Deux valeurs sont égales.
- L'un d'eux est `vrai` comme booléen et l'autre est `faux` comme booléen.

Par exemple :

```js run
let a = 0;
alert( Boolean(a) ); // false

let b = "0";
alert( Boolean(b) ); // true

alert(a == b); // true!
```

Du point de vue de JavaScript, c'est tout à fait normal. Un contrôle d'égalité convertit en utilisant la conversion numérique (par conséquent, `"0"` devient `0`), tandis que la `conversion booléenne` utilise un autre ensemble de règles.
````

## Égalité stricte

Une vérification d'égalité régulière `==` a un problème. Elle ne peut pas faire la différence entre `0` et `false` :

```js run
alert( 0 == false ); // true
```

La même chose avec une chaîne de caractères vide :

```js run
alert( '' == false ); // true
```

C’est parce que les opérandes de différents types sont convertis en un nombre par l’opérateur d’égalité `==`. Une chaîne de caractères vide, tout comme `false`, devient un zéro.

Que faire si nous voulons différencier `0` de `faux` ?

**Un opérateur d'égalité stricte `===` vérifie l'égalité sans conversion de type.**

En d'autres termes, si `a` et `b` sont de types différents, alors `a === b` renvoie immédiatement `false` sans tenter de les convertir.

Essayons :

```js run
alert( 0 === false ); // false, parce que les types sont différents
```

Il existe également un opérateur "strict non-égalité" `!==`, par analogie à la non-égalité `!=`.

The strict equality check operator is a bit longer to write, but makes it obvious what's going on and leaves less space for errors.

## Comparison with null and undefined

Let's see more edge cases.

There's a non-intuitive behavior when `null` or `undefined` are compared with other values.


For a strict equality check `===`
: These values are different, because each of them belongs to a separate type of its own.

    ```js run
    alert( null === undefined ); // false
    ```

For a non-strict check `==`
: There's a special rule. These two are a "sweet couple": they equal each other (in the sense of `==`), but not any other value.

    ```js run
    alert( null == undefined ); // true
    ```

For maths and other comparisons `< > <= >=`
: Values `null/undefined` are converted to a number: `null` becomes `0`, while `undefined` becomes `NaN`.

Now let's see funny things that happen when we apply those rules. And, what's more important, how to not fall into a trap with these features.

### Strange result: null vs 0

Let's compare `null` with a zero:

```js run
alert( null > 0 );  // (1) false
alert( null == 0 ); // (2) false
alert( null >= 0 ); // (3) *!*true*/!*
```

Yeah, mathematically that's strange. The last result states that "`null` is greater than or equal to zero". Then one of the comparisons above must be correct, but they are both false.

The reason is that an equality check `==` and comparisons `> < >= <=` work differently. Comparisons convert `null` to a number, hence treat it as `0`. That's why (3) `null >= 0` is true and (1) `null > 0` is false.

On the other hand, the equality check `==` for `undefined` and `null` is defined such that, without any conversions, they equal each other and don't equal anything else. That's why (2) `null == 0` is false.

### An incomparable undefined

The value `undefined` shouldn't participate in comparisons at all:

```js run
alert( undefined > 0 ); // false (1)
alert( undefined < 0 ); // false (2)
alert( undefined == 0 ); // false (3)
```

Why does it dislike a zero so much? Always false!

We've got these results because:

- Comparisons `(1)` and `(2)` return `false` because `undefined` gets converted to `NaN`. And `NaN` is a special numeric value which returns `false` for all comparisons.
- The equality check `(3)` returns `false`, because `undefined` only equals `null` and no other value.

### Evade problems

Why did we observe these examples? Should we remember these peculiarities all the time? Well, not really. Actually, these tricky things will gradually become familiar over time, but there's a solid way to evade any problems with them.

Just treat any comparison with `undefined/null` except the strict equality `===` with exceptional care.

Don't use comparisons `>= > < <=` with a variable which may be `null/undefined`, unless you are really sure what you're doing. If a variable can have such values, then check for them separately.

## Summary

- Comparison operators return a logical value.
- Strings are compared letter-by-letter in the "dictionary" order.
- When values of different types are compared, they get converted to numbers (with the exclusion of a strict equality check).
- Values `null` and `undefined` equal `==` each other and do not equal any other value.
- Be careful when using comparisons like `>` or `<` with variables that can occasionally be `null/undefined`. Making a separate check for `null/undefined` is a good idea.
